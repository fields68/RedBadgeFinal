@page "/weapon/detail/{WeaponId:int}"

@inject IWeaponService _weaponService
@inject NavigationManager _navManager

<h3>Weapon Details:</h3>
<hr />

<style>
	body {
		background-image: linear-gradient(#081252, #a79ecd);
	}

	h3 {
		color: #a79ecd;
	}

	.container {
		background-color: #a79ecd;
		padding: 3em;
		border-radius: 15px 50px;
	}
</style>

@if (weaponDetail is null)
{
	<p class="text-warning">Sorry, there isn't any available info.</p>
}
else
{
	<div class="container">
		<div class="card">
			<div class="card-header d-flex justify-content-between">
				<span>Weapon#@weaponDetail.Id</span>
				<span class="text-muted">@weaponDetail.Type</span>
			</div>
		</div>
		<div class="d-flex justify-content-center mt-3">
			<div class="text-center justify-content-between w-25">
				<a href="/weapon/edit/@weaponDetail.Id" class="btn btn-outline-primary">Edit</a>
				<a href="/weapon" class="btn btn-outline-secondary">Back to List</a>
				<a href="/weapon/delete/@weaponDetail.Id" class="btn btn-outline-danger">Delete</a>
			</div>
		</div>
	</div>
}

@code {
	[Parameter]
	public int WeaponId { get; set; }
	private WeaponDetail? weaponDetail { get; set; }

	protected override async Task OnInitializedAsync()
	{
		weaponDetail = await _weaponService.GetWeapon(WeaponId);
	}
}
