@page "/character/delete/{CharacterId:int}"

@attribute [Authorize]
@inject ICharacterService _characterService
@inject IElementService _elementService
@inject IRegionService _regionService
@inject IWeaponService _weaponService
@inject NavigationManager _navManager

<h3>Character Details:</h3>
<h4 class="text-danger">Are you sure you want to DELETE this Character?</h4>
<hr />

<style>
	body {
		background-image: linear-gradient(#081252, #a79ecd);
	}

	h3 {
		color: #a79ecd;
	}

	form {
		padding-right: 5px;
	}

	.container {
		background-color: #a79ecd;
		padding: 3em;
		border-radius: 15px 50px;
	}
</style>

@if (errorMessage != null)
{
	<p class="text-danger">@errorMessage</p>
}

@if (characterDetail is null)
{
	<p class="text-warning">Sorry, there isn't any available info.</p>
}
else
{
	<div class="container">
		<div class="card">
			<div class="card-header d-flex justify-content-between">
				<span>Character #@characterDetail.Id</span>
				<span class="text-muted">@characterDetail.Name</span>
			</div>
		</div>
			<div class="d-flex justify-content-center mt-3">
				<EditForm Model="@characterDetail" OnValidSubmit="@DeleteCharacter">
					<button type="submit" class="btn btn-danger mt-5">Delete</button>
				</EditForm>
				<a href="/character" class="btn btn-secondary btn-block mt-5">Back to List</a>
			</div>
	</div>

	
}

@code {
	[Parameter]
	public int CharacterId { get; set; }

	public CharacterDetail? characterDetail { get; set; }
	public string? errorMessage { get; set; }

	protected override async Task OnInitializedAsync()
	{
		characterDetail = await _characterService.GetCharacter(CharacterId);
	}

	public async Task DeleteCharacter()
	{
		var isSuccess = await _characterService.DeleteCharacter(CharacterId);
		if (isSuccess)
			_navManager.NavigateTo("/character");
		else
		{
			errorMessage = "Deletion Failed.";
		}
	}
}
